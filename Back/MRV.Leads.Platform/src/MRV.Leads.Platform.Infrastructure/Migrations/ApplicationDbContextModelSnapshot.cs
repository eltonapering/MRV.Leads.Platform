// <auto-generated />
using System;
using MRV.Leads.Platform.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MRV.Leads.Platform.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MRV.Leads.Platform.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d4b1892-226b-48b3-abdd-68b24dadb2b7"),
                            Email = "billbrady@example.com",
                            FirstName = "Bill",
                            FullName = "Bill Brady",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("eb2ecc5a-eb33-4c0e-8883-319a010fa5ce"),
                            Email = "craigflynn@example.com",
                            FirstName = "Craig",
                            FullName = "Craig Flynn",
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            Id = new Guid("e4005658-ddfe-415a-a880-3350af33aa6e"),
                            Email = "peteedwards@example.com",
                            FirstName = "Pete",
                            FullName = "Pete Edwards",
                            PhoneNumber = "1020304050"
                        },
                        new
                        {
                            Id = new Guid("43846aea-f12b-4e48-89de-c5f6e9eb1795"),
                            Email = "chrissanderson@example.com",
                            FirstName = "Chris",
                            FullName = "Chris Sanderson",
                            PhoneNumber = "5040302010"
                        });
                });

            modelBuilder.Entity("MRV.Leads.Platform.Domain.Entities.Intent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Intents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56696dc7-1dcb-453f-943d-e31b085ed99d"),
                            Active = true,
                            Category = 1,
                            ContactId = new Guid("6d4b1892-226b-48b3-abdd-68b24dadb2b7"),
                            CreatedDate = new DateTime(2024, 2, 14, 21, 45, 37, 83, DateTimeKind.Utc).AddTicks(1268),
                            Description = "Need to paint 2 aluminium windows and a siding glass door",
                            Price = 99.99m,
                            Status = 0,
                            Suburb = "Yandera 2574"
                        },
                        new
                        {
                            Id = new Guid("5f0d2942-3038-48ec-8c9b-7659d7e0d605"),
                            Active = true,
                            Category = 2,
                            ContactId = new Guid("eb2ecc5a-eb33-4c0e-8883-319a010fa5ce"),
                            CreatedDate = new DateTime(2024, 2, 14, 21, 45, 37, 83, DateTimeKind.Utc).AddTicks(1281),
                            Description = "Internal wall 3 colours",
                            Price = 99.99m,
                            Status = 0,
                            Suburb = "Woolooware 2230"
                        },
                        new
                        {
                            Id = new Guid("89d2a743-476a-434b-90ac-0b2c8f72921a"),
                            Active = true,
                            Category = 4,
                            ContactId = new Guid("e4005658-ddfe-415a-a880-3350af33aa6e"),
                            CreatedDate = new DateTime(2024, 2, 14, 21, 45, 37, 83, DateTimeKind.Utc).AddTicks(1287),
                            Description = "Plastes exposed brick wall (see photos), square off 2 archways (see photos), and expand pantry (see photos) ",
                            Price = 699.99m,
                            Status = 1,
                            Suburb = "Caramar 6031"
                        },
                        new
                        {
                            Id = new Guid("f36cc420-2059-46a0-8589-0268ad192b8f"),
                            Active = true,
                            Category = 3,
                            ContactId = new Guid("43846aea-f12b-4e48-89de-c5f6e9eb1795"),
                            CreatedDate = new DateTime(2024, 2, 14, 21, 45, 37, 83, DateTimeKind.Utc).AddTicks(1292),
                            Description = "There is a two story building at the front of the main house that´s about 10x5 thatwould like to convert into self contained living area ",
                            Price = 499.99m,
                            Status = 1,
                            Suburb = "Quinss Rocks 6030"
                        });
                });

            modelBuilder.Entity("MRV.Leads.Platform.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75294ebe-5813-468b-8d35-46879f6b6f3b"),
                            Active = false,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            Login = "user1",
                            PasswordHash = "SomeHashedPassword"
                        },
                        new
                        {
                            Id = new Guid("f6b279d1-0c84-43ba-acca-a44454a86c9e"),
                            Active = false,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            Login = "user2",
                            PasswordHash = "SomeHashedPassword"
                        });
                });

            modelBuilder.Entity("MRV.Leads.Platform.Domain.Entities.Intent", b =>
                {
                    b.HasOne("MRV.Leads.Platform.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
